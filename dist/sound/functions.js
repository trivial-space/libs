// Generated by github.com/steida/coffee2closure 0.1.9
define(function() {
  return {
    withAudioContext: function(success, error) {
      var context;
      context = null;
      if (typeof AudioContext !== "undefined") {
        context = new AudioContext();
      } else if (typeof webkitAudioContext !== "undefined") {
        context = new webkitAudioContext();
      }
      if (context) {
        return success(context);
      } else {
        return typeof error === "function" ? error() : void 0;
      }
    },
    loadSounds: function(context, urlList, success, error) {
      var bufferList, e, index, loadBuffer, loadCount, url, _i, _len, _results;
      bufferList = new Array();
      loadCount = 0;
      loadBuffer = function(url, index) {
        var request;
        request = new XMLHttpRequest();
        request.open("GET", url, true);
        request.responseType = "arraybuffer";
        request.onload = function() {
          return context.decodeAudioData(request.response, (function(buffer) {
            if (!buffer) {
              throw Error("error decoding file data: " + url);
            }
            bufferList[index] = buffer;
            if (++loadCount === urlList.length) {
              return success(bufferList);
            }
          }), function() {
            throw Error("decodeAudioData error");
          });
        };
        request.onerror = function() {
          throw Error("SoundLoader: XHR error");
        };
        return request.send();
      };
      try {
        _results = [];
        for (index = _i = 0, _len = urlList.length; _i < _len; index = ++_i) {
          url = urlList[index];
          _results.push(loadBuffer(url, index));
        }
        return _results;
      } catch (_error) {
        e = _error;
        console.error(e);
        return typeof error === "function" ? error(e) : void 0;
      }
    },
    source: function(buffer, context) {
      var sound;
      sound = context.createBufferSource();
      sound.buffer = buffer;
      return sound;
    }
  };
});