// Generated by github.com/steida/coffee2closure 0.1.9
goog.provide('tslibs.graphics.PixelContext');
goog.require('tslibs.graphics');
goog.require('goog.object');
tslibs.graphics.PixelContext = function(_at_imageData) {
  this.imageData = _at_imageData;
  this.data = this.imageData.data;
  this.width = this.imageData.width;
  this.height = this.imageData.height;
}
tslibs.graphics.PixelContext.prototype.adjustPos = function(pos) {
  return pos;
};
tslibs.graphics.PixelContext.prototype.getPixelIndex = function(pos) {
  var x, y, _ref;
  _ref = this.adjustPos(pos), x = _ref[0], y = _ref[1];
  return (y * this.height + x) * 4;
};
tslibs.graphics.PixelContext.prototype.getColorAt = function(pos) {
  var i;
  i = this.getPixelIndex(pos);
  return [this.data[i], this.data[i + 1], this.data[i + 2], this.data[i + 3]];
};
tslibs.graphics.PixelContext.prototype.setColorAt = function(pos, color) {
  var i;
  i = this.getPixelIndex(pos);
  this.data[i] = color[0];
  this.data[i + 1] = color[1];
  this.data[i + 2] = color[2];
  return this.data[i + 3] = color[3];
};
tslibs.graphics.PixelContext.prototype.increaseAllBy = function(_arg) {
  var a, b, d, g, i, r, _i, _ref, _results;
  r = _arg[0], g = _arg[1], b = _arg[2], a = _arg[3];
  d = this.data;
  _results = [];
  for (i = _i = 0, _ref = d.length - 1; _i <= _ref; i = _i += 4) {
    if (d[i] + r < 256) {
      d[i] += r;
    }
    if (d[i + 1] + g < 256) {
      d[i + 1] += g;
    }
    if (d[i + 2] + b < 256) {
      d[i + 2] += b;
    }
    if (d[i + 3] + a < 256) {
      _results.push(d[i + 3] += a);
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};
tslibs.graphics.PixelContext.prototype.decreaseAllBy = function(_arg) {
  var a, b, d, g, i, r, _i, _ref, _results;
  r = _arg[0], g = _arg[1], b = _arg[2], a = _arg[3];
  d = this.data();
  _results = [];
  for (i = _i = 0, _ref = d.length - 1; _i <= _ref; i = _i += 4) {
    if (r <= d[i]) {
      d[i] -= r;
    }
    if (g <= d[i + 1]) {
      d[i + 1] -= g;
    }
    if (b <= d[i + 2]) {
      d[i + 2] -= b;
    }
    if (a <= d[i + 3]) {
      _results.push(d[i + 3] -= a);
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};
tslibs.graphics.PixelContext.prototype.replaceWithImageDataAt = function(pixelCtx, _arg) {
  var h, i, j, w, x, y, _i, _results;
  x = _arg[0], y = _arg[1];
  w = pixelCtx.width - 1;
  h = pixelCtx.height - 1;
  _results = [];
  for (i = _i = 0; 0 <= w ? _i <= w : _i >= w; i = 0 <= w ? ++_i : --_i) {
    _results.push((function() {
      var _j, _results1;
      _results1 = [];
      for (j = _j = 0; 0 <= h ? _j <= h : _j >= h; j = 0 <= h ? ++_j : --_j) {
        _results1.push(this.setColorAt([x + i, y + j], pixelCtx.getColorAt([i, j])));
      }
      return _results1;
    }).call(this));
  }
  return _results;
};
tslibs.graphics.PixelContext.prototype.drawImageAt = function(pixelCtx, _arg) {
  var h, i, j, w, x, y, _i, _results;
  x = _arg[0], y = _arg[1];
  w = pixelCtx.width() - 1;
  h = pixelCtx.height() - 1;
  _results = [];
  for (i = _i = 0; 0 <= w ? _i <= w : _i >= w; i = 0 <= w ? ++_i : --_i) {
    _results.push((function() {
      var _j, _results1;
      _results1 = [];
      for (j = _j = 0; 0 <= h ? _j <= h : _j >= h; j = 0 <= h ? ++_j : --_j) {
        _results1.push(this.setColorAt([x + i, y + j], tslibs.graphics.mixColors(this.getColorAt([x + i, y + j]), pixelCtx.getColorAt([i, j]))));
      }
      return _results1;
    }).call(this));
  }
  return _results;
};
tslibs.graphics.PixelContext.prototype.mixinColor = function(color) {
  var h, w, x, y, _i, _results;
  w = this.imageData.width - 1;
  h = this.imageData.height - 1;
  _results = [];
  for (x = _i = 0; 0 <= w ? _i <= w : _i >= w; x = 0 <= w ? ++_i : --_i) {
    _results.push((function() {
      var _j, _results1;
      _results1 = [];
      for (y = _j = 0; 0 <= h ? _j <= h : _j >= h; y = 0 <= h ? ++_j : --_j) {
        _results1.push(this.setColorAt([x, y], tslibs.graphics.mixColors(this.getColorAt([x, y]), color)));
      }
      return _results1;
    }).call(this));
  }
  return _results;
};
tslibs.graphics.ClosedPixelContext = function() {
  return tslibs.graphics.ClosedPixelContext.superClass_.constructor.apply(this, arguments);
}
goog.inherits(tslibs.graphics.ClosedPixelContext, tslibs.graphics.PixelContext);
tslibs.graphics.ClosedPixelContext.prototype.adjustPos = function(_arg) {
  var h, w, x, y;
  x = _arg[0], y = _arg[1];
  w = this.width;
  h = this.height;
  if (x < 0) {
    x = 0;
  }
  if (y < 0) {
    y = 0;
  }
  if (x >= w) {
    x = w;
  }
  if (y >= h) {
    y = h;
  }
  return [x, y];
};
tslibs.graphics.RepeatedPixelContext = function() {
  return tslibs.graphics.RepeatedPixelContext.superClass_.constructor.apply(this, arguments);
}
goog.inherits(tslibs.graphics.RepeatedPixelContext, tslibs.graphics.PixelContext);
tslibs.graphics.RepeatedPixelContext.prototype.adjustPos = function(_arg) {
  var h, w, x, y;
  x = _arg[0], y = _arg[1];
  w = this.width;
  h = this.height;
  if (x >= w) {
    x -= w;
  }
  if (y >= h) {
    y -= h;
  }
  if (x < 0) {
    x += w;
  }
  if (y < 0) {
    y += h;
  }
  return [x, y];
};
tslibs.graphics.createCtxFromImg = function(img, ContextClass) {
  var c, ctx, imgData;
  c = document.createElement("canvas");
  c.width = img.width;
  c.height = img.height;
  ctx = c.getContext("2d");
  ctx.drawImage(img, 0, 0, img.width, img.height);
  imgData = ctx.getImageData(0, 0, img.width, img.height);
  return new ContextClass(imgData);
};